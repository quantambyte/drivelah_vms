openapi: 3.0.0
info:
  title: Voucher and Promotion API
  version: 1.0.0
  description: API documentation for managing vouchers and promotions
servers:
  - url: http://localhost:3000/api
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /vouchers:
      get:
        security:
          - bearerAuth: []
        summary: Get a voucher by ID
        tags: [Vouchers]
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: integer
            description: The voucher ID
        responses:
          200:
            description: Voucher data
          404:
            description: Voucher not found
      get:
        security:
          - bearerAuth: []
        summary: Get all vouchers
        tags:
          - Vouchers
        responses:
          200:
            description: List of vouchers
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Voucher"
          401:
            description: Unauthorized
      post:
        security:
          - bearerAuth: []
        summary: Create a new voucher
        tags: [Vouchers]
        requestBody:
          required: true
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/CreateVoucher"
        responses:
          200:
            description: Voucher created successfully
          400:
            description: Validation error
  
  /vouchers/{id}:
    put:
      security:
        - bearerAuth: []
      summary: Update a voucher by ID
      tags: 
        - Vouchers
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The voucher ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                discountType:
                  type: string
                  example: "fixed"
                discountValue:
                  type: number
                  example: 15
                expirationDate:
                  type: string
                  format: date
                  example: "2024-12-31"
                usageLimit:
                  type: integer
                  example: 200
                minimumOrderValue:
                  type: number
                  example: 100
      responses:
        200:
          description: Voucher updated successfully
        400:
          description: Validation error
        404:
          description: Voucher not found
    delete:
        security:
          - bearerAuth: []
        summary: Delete a voucher by ID
        tags: 
          - Vouchers
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: integer
            description: The voucher ID
        responses:
          200:
            description: Voucher deleted successfully
          404:
            description: Voucher not found
  
  /orders:
    post:
      security:
        - bearerAuth: []
      summary: Create a new order
      tags: 
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  example: 1
                totalPrice:
                  type: number
                  format: float
                  example: 100.0
      responses:
        201:
          description: Order created successfully
        400:
          description: Validation error
    get:
      security:
        - bearerAuth: []
      summary: Get all orders
      tags: 
        - Orders
      responses:
        200:
          description: List of all orders
        401:
          description: Unauthorized access

  /orders/{id}:
    get:
      security:
        - bearerAuth: []
      summary: Get order by ID
      tags: 
        - Orders
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The order ID
      responses:
        200:
          description: Order details
        404:
          description: Order not found

    put:
      security:
        - bearerAuth: []
      summary: Update an order by ID
      tags: 
        - Orders
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                totalPrice:
                  type: number
                  format: float
                  example: 150.0
      responses:
        200:
          description: Order updated successfully
        404:
          description: Order not found

    delete:
      security:
        - bearerAuth: []
      summary: Delete an order by ID
      tags: 
        - Orders
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The order ID
      responses:
        200:
          description: Order deleted successfully
        404:
          description: Order not found

  /orders/{id}/apply-discount:
    post:
      security:
        - bearerAuth: []
      summary: Apply a discount (voucher or promotion) to an order
      tags: 
        - Orders
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                discountType:
                  type: string
                  enum: [voucher, promotion]
                  example: "voucher"
                discountId:
                  type: integer
                  example: 10
      responses:
        200:
          description: Discount applied successfully
        404:
          description: Order or discount not found
      summary: Create an order
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrder"
      responses:
        201:
          description: Order created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        400:
          description: Validation error

  /products:
    post:
      security:
        - bearerAuth: []
      summary: Create a new product
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productName:
                  type: string
                  example: "Organic Shampoo"
                productCategory:
                  type: string
                  enum:
                    - digital services
                    - cosmetics and body care
                    - food and beverage
                    - furniture and decor
                    - health and wellness
                    - household items
                    - media
                    - pet care
                    - office equipment
                  example: "cosmetics and body care"
                price:
                  type: number
                  format: float
                  example: 19.99
                stock:
                  type: integer
                  example: 50
      responses:
        201:
          description: Product created successfully
        400:
          description: Validation error

    get:
      security:
        - bearerAuth: []
      summary: Get all products
      tags:
        - Products
      responses:
        200:
          description: List of products
        401:
          description: Unauthorized access

  /products/{id}:
    get:
      security:
        - bearerAuth: []
      summary: Get product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The product ID
      responses:
        200:
          description: Product details
        404:
          description: Product not found

    put:
      security:
        - bearerAuth: []
      summary: Update a product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productName:
                  type: string
                  example: "Organic Shampoo"
                productCategory:
                  type: string
                  enum:
                    - digital services
                    - cosmetics and body care
                    - food and beverage
                    - furniture and decor
                    - health and wellness
                    - household items
                    - media
                    - pet care
                    - office equipment
                  example: "cosmetics and body care"
                price:
                  type: number
                  format: float
                  example: 19.99
                stock:
                  type: integer
                  example: 50
      responses:
        200:
          description: Product updated successfully
        400:
          description: Validation error
        404:
          description: Product not found

    delete:
      security:
        - bearerAuth: []
      summary: Delete a product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The product ID
      responses:
        200:
          description: Product deleted successfully
        404:
          description: Product not found

  /promotions:
    post:
      security:
        - bearerAuth: []
      summary: Create a new promotion
      tags:
        - Promotions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eligibleCategories:
                  type: array
                  items:
                    type: string
                  example: ["food and beverage", "cosmetics and body care"]
                discountType:
                  type: string
                  enum: [percentage, fixed]
                  example: "percentage"
                discountValue:
                  type: number
                  format: float
                  example: 20.0
                expirationDate:
                  type: string
                  format: date
                  example: "2024-12-31"
                usageLimit:
                  type: integer
                  example: 100
      responses:
        201:
          description: Promotion created successfully
        400:
          description: Validation error

    get:
      security:
        - bearerAuth: []
      summary: Get all promotions
      tags:
        - Promotions
      responses:
        200:
          description: List of promotions
        401:
          description: Unauthorized access

  /promotions/{id}:
    get:
      security:
        - bearerAuth: []
      summary: Get promotion by ID
      tags:
        - Promotions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The promotion ID
      responses:
        200:
          description: Promotion details
        404:
          description: Promotion not found

    put:
      security:
        - bearerAuth: []
      summary: Update a promotion by ID
      tags:
        - Promotions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The promotion ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eligibleCategories:
                  type: array
                  items:
                    type: string
                  example: ["health and wellness", "media"]
                discountType:
                  type: string
                  enum: [percentage, fixed]
                  example: "fixed"
                discountValue:
                  type: number
                  format: float
                  example: 15.0
                expirationDate:
                  type: string
                  format: date
                  example: "2024-12-31"
                usageLimit:
                  type: integer
                  example: 200
      responses:
        200:
          description: Promotion updated successfully
        400:
          description: Validation error
        404:
          description: Promotion not found

    delete:
      security:
        - bearerAuth: []
      summary: Delete a promotion by ID
      tags:
        - Promotions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The promotion ID
      responses:
        200:
          description: Promotion deleted successfully
        404:
          description: Promotion not found

  /users/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: "John Doe"
                userEmail:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                userPassword:
                  type: string
                  format: password
                  example: "password123"
      responses:
        201:
          description: User registered successfully
        400:
          description: Validation error

  /users/login:
    post:
      summary: Login a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userEmail:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                userPassword:
                  type: string
                  format: password
                  example: "password123"
      responses:
        200:
          description: User logged in successfully
        401:
          description: Invalid credentials
        400:
          description: Validation error



components:
  schemas:
    Voucher:
      type: object
      properties:
        id:
          type: integer
        code:
          type: string
        discountType:
          type: string
          enum: [percentage, fixed]
        discountValue:
          type: number
        expirationDate:
          type: string
          format: date-time
        usageLimit:
          type: integer
        minOrderValue:
          type: number
    CreateVoucher:
      type: object
      properties:
        code:
          type: string
        discountType:
          type: string
        discountValue:
          type: number
        expirationDate:
          type: string
          format: date-time
        usageLimit:
          type: integer
        minOrderValue:
          type: number

    Order:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        totalPrice:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateOrder:
      type: object
      properties:
        userId:
          type: integer
        totalPrice:
          type: number
